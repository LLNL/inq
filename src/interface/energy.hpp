/* -*- indent-tabs-mode: t -*- */

#ifndef INQ__INTERFACE__ENERGY
#define INQ__INTERFACE__ENERGY

// Copyright (C) 2019-2024 Lawrence Livermore National Security, LLC., Xavier Andrade, Alfredo A. Correa
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#include <input/environment.hpp>
#include <hamiltonian/energy.hpp>

namespace inq {
namespace interface {

struct {		

	std::string name() const {
		return "energy";
	}

	std::string one_line() const {
		return "Get information about the energy obtained by a ground-state calculation";
	}

	void help() const {
		
		std::cout << R""""(

The 'energy' command
==================

This command queries the energy obtained from a ground-state
calculation. Without arguments, `energy` prints all the energy values
calculated. The options allows you to query a specific energy
value. In this case only the value will be printed without any other
text, so it is suitable for easy parsing in scripting. The values are
returned in Hartree.

These are the available subcommands:

- `energy`

  When no arguments are given, `energy` will print all the energy values available.

  Example: `inq energy`.


- `energy total`

  Returns the total energy of the calculation. This includes the ionic
  contribution.

  Example: `inq energy total`.


- `energy kinetic`

  The electronic kinetic energy.

  Example: `inq energy kinetic`.


- `energy eigenvalues`

  The sum of the eigenvalues, weighed by the occupations.

  Example: `inq energy eigenvalues`.


- `energy Hartree`

  The classical electrostatic interaction energy between electrons.

  Example: `inq energy Hartree`.


- `energy external`

  The energy of the interaction of the electrons with the local
  potential generated by the ions. This doesn't include the non-local
  pseudopotential part.

  Example: `inq energy external`.


- `energy non-local`

  The energy of the interaction of the electrons with the non-local
  part of the ionic pseudo-potentials.

  Example: `inq energy non-local`.


- `energy xc`

  The exchange and correlation energy from DFT semi-local
  functionals. It doesn't include the contribution from Hartree-Fock
  exchange (see `energy exact_exchange`).

  Example: `inq energy xc`.


- `energy nvxc`

  The energy of the interaction of the exchange and correlation
  potential and the density. This is different from the exchange and
  correlation energy.

  Example: `inq energy nvxc`.


- `energy exact-exchange`

  The Hartree-Fock exact-exchange energy. This is calculated for
  Hartree-Fock and hybrid functionals.

  Example: `inq energy exact-exchange`.


- `energy ion`

  The ion-ion interaction energy. This value is calculated taking into
  account the periodicity of the system.

  Example: `inq energy ion`.


)"""";
	}

	void operator()() const {
		auto ener = hamiltonian::energy::load(".inq/default_energy");
		if(input::environment::global().comm().root()) std::cout << ener;
	}

  double total() const{
    return hamiltonian::energy::load(".inq/default_energy").total();
  }
	
  double kinetic() const{
    return hamiltonian::energy::load(".inq/default_energy").kinetic();
  }

  double eigenvalues() const{
    return hamiltonian::energy::load(".inq/default_energy").eigenvalues();
  }

  double external() const{
    return hamiltonian::energy::load(".inq/default_energy").external();
  }
  
  double non_local() const{
    return hamiltonian::energy::load(".inq/default_energy").non_local();
  }
  
  double hartree() const{
    return hamiltonian::energy::load(".inq/default_energy").hartree();
  }
  
  double xc() const{
    return hamiltonian::energy::load(".inq/default_energy").xc();
  }

  double nvxc() const{
    return hamiltonian::energy::load(".inq/default_energy").nvxc();
  }

  double exact_exchange() const{
    return hamiltonian::energy::load(".inq/default_energy").exact_exchange();
  }
  
  double ion() const{
    return hamiltonian::energy::load(".inq/default_energy").ion();
  }

	template <typename ArgsType>
	void command(ArgsType args, bool quiet) const {

		if(args.size() == 0) {
			operator()();
			exit(0);
    }			

    if(args.size() == 1 and args[0] == "total"){
      printf("%.20e\n", total());
      exit(0);
    }

    if(args.size() == 1 and args[0] == "kinetic"){
			if(input::environment::global().comm().root()) printf("%.20e\n", kinetic());
      exit(0);
    }

    if(args.size() == 1 and args[0] == "eigenvalues"){
			if(input::environment::global().comm().root()) printf("%.20e\n", eigenvalues());
      exit(0);
    }
    
    if(args.size() == 1 and args[0] == "external"){
      if(input::environment::global().comm().root()) printf("%.20e\n", external());
      exit(0);
    }

    if(args.size() == 1 and args[0] == "non-local"){
      if(input::environment::global().comm().root()) printf("%.20e\n", non_local());
      exit(0);
    }

    if(args.size() == 1 and args[0] == "hartree"){
      if(input::environment::global().comm().root()) printf("%.20e\n", hartree());
      exit(0);
    }

    if(args.size() == 1 and args[0] == "xc"){
      if(input::environment::global().comm().root()) printf("%.20e\n", xc());
      exit(0);
    }

    if(args.size() == 1 and args[0] == "nvxc"){
      if(input::environment::global().comm().root()) printf("%.20e\n", nvxc());
      exit(0);
    }

    if(args.size() == 1 and args[0] == "exact-exchange"){
      if(input::environment::global().comm().root()) printf("%.20e\n", exact_exchange());
      exit(0);
    }
        
    if(args.size() == 1 and args[0] == "ion"){
      if(input::environment::global().comm().root()) printf("%.20e\n", ion());
      exit(0);
    }
      
		if(input::environment::global().comm().root()) std::cerr << "Error: Invalid syntax in the 'energy' command" << std::endl;
		exit(1);
    
	}
	
} const energy;

}
}
#endif

#ifdef INQ_INTERFACE_ENERGY_UNIT_TEST
#undef INQ_INTERFACE_ENERGY_UNIT_TEST

#include <catch2/catch_all.hpp>

TEST_CASE(INQ_TEST_FILE, INQ_TEST_TAG) {

	using namespace inq;
	using namespace Catch::literals;

}
#endif
