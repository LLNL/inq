# -*- indent-tabs-mode: t -*-
# Copyright (C) 2019-2024 Lawrence Livermore National Security, LLC., Xavier Andrade, Alfredo A. Correa
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
cmake_minimum_required(VERSION 3.15)  # for Boost::headers

include_directories(.)
include_directories(../external_libs)

find_package(Boost REQUIRED COMPONENTS headers CONFIG)

add_library(unit_tests_main OBJECT main/unit_tests_main.cpp)
if(ENABLE_GPU)
	set_source_files_properties(main/unit_tests_main.cpp PROPERTIES LANGUAGE ${GPU_LANGUAGE})
endif()
target_link_libraries(unit_tests_main PRIVATE inq Catch2::Catch2WithMain)

file(GLOB INCLUDE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} */*.hpp)

add_custom_command(OUTPUT all_unit_tests.cpp
													COMMAND echo ARGS //This file is automatically generated, do not edit > ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
													COMMAND echo ARGS \\\#include \\\"inq/inq.hpp\\\" >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp)
													
foreach(TEST_FILE ${INCLUDE_FILES})
  get_filename_component(dir ${TEST_FILE} DIRECTORY)
  get_filename_component(name ${TEST_FILE} NAME_WE)
	string(TOUPPER INQ_${dir}_${name}_UNIT_TEST test_macro)
  add_custom_command(OUTPUT all_unit_tests.cpp
    COMMAND echo ARGS \\\#define ${test_macro} >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
    COMMAND echo ARGS \\\#define INQ_TEST_FILE \\\"${TEST_FILE}\\\" >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
    COMMAND echo ARGS \\\#define INQ_TEST_TAG \\\"[${dir}][${name}]\\\" >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
    COMMAND echo ARGS \\\#include \\\"${CMAKE_CURRENT_SOURCE_DIR}/${TEST_FILE}\\\" >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
    COMMAND echo ARGS \\\#ifdef ${test_macro} >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
    COMMAND echo ARGS \\\#error NO TEST INCLUDED, MACRO ${test_macro} STILL DEFINED >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
    COMMAND echo ARGS \\\#endif >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
    COMMAND echo ARGS \\\#undef INQ_TEST_FILE >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
    COMMAND echo ARGS \\\#undef INQ_TEST_TAG >> ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests.cpp
		DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${TEST_FILE}
		APPEND)

	add_test(NAME inq::unit_tests::${dir}::${name} COMMAND ${PROJECT_BINARY_DIR}/scripts/run_test.sh ${CMAKE_CURRENT_BINARY_DIR}/all_unit_tests [${dir}][${name}])
endforeach()

if(ENABLE_GPU)
	set_source_files_properties(all_unit_tests.cpp PROPERTIES LANGUAGE ${GPU_LANGUAGE})
endif()

add_executable(all_unit_tests)
target_sources(all_unit_tests PRIVATE all_unit_tests.cpp)
target_compile_definitions(all_unit_tests PRIVATE "BOOST_PP_VARIADICS=1")  # NVCC needs BOOST_PP_VARIADICS to compile some Boost headers
target_link_libraries(
  all_unit_tests PRIVATE
  unit_tests_main
  Catch2::Catch2
  Boost::headers  # for Boost.Spirit
  inq
)

if(ENABLE_GPU)
	set_source_files_properties(main/inq.cpp PROPERTIES LANGUAGE ${GPU_LANGUAGE})
endif()

add_executable(inq_executable)
set_property(TARGET inq_executable PROPERTY OUTPUT_NAME inq)
target_sources(inq_executable PRIVATE main/inq.cpp)
target_compile_definitions(inq_executable PRIVATE "BOOST_PP_VARIADICS=1")
target_link_libraries(inq_executable PRIVATE
inq
Boost::headers  # for Boost.Spirit
)
install(TARGETS inq_executable)
