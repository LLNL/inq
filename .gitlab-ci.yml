# Copyright (C) 2019-2020 Xavier Andrade, Alfredo A. Correa

image: debian:testing

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CXXFLAGS: "-O3 -pipe"
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

#check that the configuration fails if fftw is not found

build-noblas:
    stage: build
    script:
      - time apt update -qq 
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libfftw3-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - eval ! ../configure --prefix=$HOME

build-noboost:
    stage: build
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - eval ! ../configure --prefix=$HOME

build-nofftw:
    stage: build
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - eval ! ../configure --prefix=$HOME

build-nolapack:
    stage: build
    script:
      - time apt update -qq 
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - eval ! ../configure --prefix=$HOME

gcc:
    stage: build
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - time ../configure --prefix=$HOME  || cat config.log
      - time make -j4
      - time make -j4 install
      - time src/inq_unit_tests
      - time mpirun -np 2 --oversubscribe src/inq_unit_tests
      - time mpirun -np 3 --oversubscribe src/inq_unit_tests
      - time mpirun -np 4 --oversubscribe src/inq_unit_tests
      - time tests/hydrogen_local
      - time tests/neon
      - time tests/h2o_ground_state
      - time tests/h2o_real_time

gcc-fast:
    stage: build
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-Ofast -ffast-math -DNDEBUG -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - time ../configure --prefix=$HOME  || cat config.log
      - time make -j4
      - time make -j4 install
      - time src/inq_unit_tests
      - time mpirun -np 2 --oversubscribe src/inq_unit_tests
      - time mpirun -np 3 --oversubscribe src/inq_unit_tests
      - time mpirun -np 4 --oversubscribe src/inq_unit_tests
      - time tests/hydrogen_local
      - time tests/neon
      - time tests/h2o_ground_state
      - time tests/h2o_real_time
            
intel:
    stage: build
    tags:
      - intel_compiler
    script:
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      -  . /opt/intel/system_studio_2020/bin/compilervars.sh intel64
      - mkdir build
      - cd build
      - export OMPI_CC=icc
      - export OMPI_CXX=icpc
      - export CXXFLAGS="-Ofast -Wall -Wextra"
      - time ../configure --prefix=$HOME  || cat config.log
      - time make -j4
      - time make -j4 install
      - time src/inq_unit_tests
#      - time mpirun -np 2 --oversubscribe src/inq_unit_tests
#      - time mpirun -np 3 --oversubscribe src/inq_unit_tests
#      - time mpirun -np 4 --oversubscribe src/inq_unit_tests
      - time tests/hydrogen_local
      - time tests/neon
      - time tests/h2o_ground_state
      - time tests/h2o_real_time
    
clang:
    stage: build
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2    
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - clang++ --version
      - mkdir build
      - cd build
      - export OMPI_CXX=clang++
      - export CXXFLAGS="-O3 -pipe -Wall -Werror"
      - time ../configure --prefix=$HOME
      - ls -l
      - time make -j4
      - time make -j4 install
      - time src/inq_unit_tests
      - time mpirun -np 2 --oversubscribe src/inq_unit_tests
      - time mpirun -np 3 --oversubscribe src/inq_unit_tests
      - time mpirun -np 4 --oversubscribe src/inq_unit_tests
      - time tests/hydrogen_local
      - time tests/neon
      - time tests/h2o_ground_state
      - time tests/h2o_real_time
      

#clang-cuda:
#    stage: build
#    tags:
#      - cuda_gpu
#    script:
#      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi    
#      - export PATH=/usr/local/cuda/bin:$PATH
#      - clang++-10 -v
#      - mkdir clang_cuda
#      - cd clang_cuda
#      - export CXX="clang++-10 -x cuda --cuda-gpu-arch=sm_50"
#      - export CXXLD="clang++-10"
#      - export CXXFLAGS=" $(for x in `mpic++ --showme:incdirs`; do echo -n -I$x" " ; done) -g -pg -D_DISABLE_CUDA_SLOW -O3 -std=c++14 -Wall"
#      - export LDFLAGS=$(for x in `mpic++ --showme:libdirs`; do echo -n -L$x" " ; done)
#      - export LIBS=$(for x in `mpic++ --showme:libs`; do echo -n -l$x" " ; done)
#      - time ../configure --prefix=$HOME --enable-cuda --with-cuda-prefix=/usr/local/cuda || cat config.log
#      - time make -j4
#      - time make -j4 install
#      - time src/inq_unit_tests
#      - time tests/hydrogen_local
#      - time tests/neon
#      - time tests/h2o_ground_state
#      - time tests/h2o_real_time
      
clang-fast:
    stage: build
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2    
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - clang++ --version
      - mkdir build
      - cd build
      - export OMPI_CXX=clang++
      - export CXXFLAGS="-Ofast -fno-builtin -ffast-math -pipe -Wall -Werror -DNDEBUG"
      - time ../configure --prefix=$HOME
      - time make -j4
      - time make -j4 install
      - time src/inq_unit_tests
      - time mpirun -np 2 --oversubscribe src/inq_unit_tests
      - time mpirun -np 3 --oversubscribe src/inq_unit_tests
      - time mpirun -np 4 --oversubscribe src/inq_unit_tests
      - time tests/hydrogen_local
      - time tests/neon
      - time tests/h2o_ground_state
      - time tests/h2o_real_time

clang-valgrind:
    stage: build
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2 valgrind
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - clang++ --version
      - mkdir build
      - cd build
      - export OMPI_CXX=clang++
      - export CXXFLAGS="-g -Ofast -fno-builtin -ffast-math -pipe -Wall -Werror -DNDEBUG"
      - time ../configure --prefix=$HOME
      - time make -j4
      - time make -j4 install
      - export VALGRIND="valgrind --leak-check=full --track-origins=yes --show-leak-kinds=all --error-exitcode=1 --gen-suppressions=all --suppressions=../.valgrind_suppressions"
      - time $VALGRIND src/inq_unit_tests
      - time $VALGRIND tests/h2o_ground_state
      - time $VALGRIND tests/h2o_real_time
      
#clang-mpich-asan:
#    stage: build
#    script:
#      - time apt update -qq
#      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev bzip2 valgrind libmpich-dev mpich
#      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
#      - clang++ --version
#      - mkdir build
#      - cd build
#      - export CXX=clang++
#      - export MPICH_CC=clang++
#      - export MPICH_CXX=clang++
#      - export CXXFLAGS="-fsanitize=undefined -fsanitize=address -g -Ofast -fno-builtin -ffast-math -pipe -Wall -Werror -DNDEBUG"
#      - time ../configure --prefix=$HOME
#      - time make -j4
#      - time make -j4 install
#      - time src/inq_unit_tests
#      - time tests/h2o_ground_state
#      - time tests/h2o_real_time

gcc-mpich-valgrind:
    stage: build
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev bzip2 valgrind libmpich-dev mpich
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - c++ --version
      - mpichversion
      - mkdir build
      - cd build
      - export CXXFLAGS="-g -Ofast -fno-builtin -ffast-math -pipe -Wall -Werror -DNDEBUG"
      - time ../configure --prefix=$HOME
      - time make -j4
      - time make -j4 install
      - export VALGRIND="valgrind --leak-check=full --track-origins=yes --show-leak-kinds=all --error-exitcode=1 --gen-suppressions=all"
      - time $VALGRIND src/inq_unit_tests
      - time $VALGRIND tests/h2o_ground_state
      - time $VALGRIND tests/h2o_real_time

#nvcc-nocuda:
#    stage: build
#    script:
#      - perl -pi -e 's/main/main contrib non-free/g' /etc/apt/sources.list
#      - time apt update -qq
#      - time apt install --no-install-recommends -y -qq git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-serialization-dev bzip2 nvidia-cuda-toolkit nvidia-cuda-dev nvidia-smi
#      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
#      - export PATH=/usr/local/cuda/bin:$PATH
#      - nvcc -V
#      - mkdir nvcc
#      - cd nvcc
#      - export CXX="nvcc -x cu"
#      - export CXXLD="nvcc"
#      - export CXXFLAGS="$(for x in `mpic++ --showme:incdirs`; do echo -n -I$x" " ; done) -D_DISABLE_CUDA_SLOW -O3 --expt-relaxed-constexpr --expt-extended-lambda --Werror=cross-execution-space-call --compiler-options -Ofast,-std=c++14,-Wall,-Wfatal-errors"
#      - export LDFLAGS=$(for x in `mpic++ --showme:libdirs`; do echo -n -L$x" " ; done)
#      - export LIBS=$(for x in `mpic++ --showme:libs`; do echo -n -l$x" " ; done)
#      - time ../configure --prefix=$HOME || cat config.log
#      - time make -j4
#      - time make -j4 install
#      - time src/inq_unit_tests
#      - time mpirun -np 2 --oversubscribe src/inq_unit_tests
#      - time mpirun -np 3 --oversubscribe src/inq_unit_tests
#      - time mpirun -np 4 --oversubscribe src/inq_unit_tests
#      - time tests/hydrogen_local
#      - time tests/neon
#      - time tests/h2o_ground_state
#      - time tests/h2o_real_time
      
nvcc:
    stage: build
    tags:
      - cuda_gpu
    script:
      - if [ -v UPDATE_MULTI ] ; then cd external_libs/multi && git checkout master && git pull && cd - ; fi
      - export PATH=/usr/local/cuda/bin:$PATH
      - nvcc -V
      - mkdir nvcc
      - cd nvcc
      - export CUDAFLAGS="$(for x in `mpic++ --showme:incdirs`; do echo -n -I$x" " ; done) -D_DISABLE_CUDA_SLOW -O3 --expt-relaxed-constexpr --expt-extended-lambda --Werror=cross-execution-space-call --compiler-options -Ofast,-std=c++14,-Wall,-Wfatal-errors"
      - export LDFLAGS=$(for x in `mpic++ --showme:libdirs`; do echo -n -L$x" " ; done)
      - export LIBS=$(for x in `mpic++ --showme:libs`; do echo -n -l$x" " ; done)
      - time ../configure --prefix=$HOME --enable-cuda --with-cuda-prefix=/usr/local/cuda
      - time make -j4
      - time make -j4 install
      - time src/inq_unit_tests
      - time tests/hydrogen_local
      - time tests/neon
      - time tests/h2o_ground_state
      - time tests/h2o_real_time
