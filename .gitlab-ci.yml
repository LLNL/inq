# Copyright (C) 2019-2020 Xavier Andrade, Alfredo A. Correa

image: npneq/debian_inq_deps:bookworm

default:
  artifacts:
    expire_in: 2 days
    
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CXXFLAGS: "-O3 -pipe"
  OMPI_ALLOW_RUN_AS_ROOT: "1"
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: "1"
# avoid the annoying messages from openmpi over docker, https://github.com/open-mpi/ompi/issues/4948
  OMPI_MCA_btl_vader_single_copy_mechanism: "none"
  OMPI_MCA_rmaps_base_oversubscribe: "1" 
  CODECOV_TOKEN: "5855e536-b784-400e-b0b2-b1d01c2287a9"
  DEBIAN_FRONTEND: "noninteractive"

stages:
  - config-check
  - build
  - test
  - clean
  - template

#########################################################################################################################
# CHECK MISSING LIBRARY DETECTION 
#########################################################################################################################

config-no-boost:
    stage: config-check
    script:
      - apt purge -y -qq libboost-serialization-dev libboost-filesystem-dev
      - apt autoremove -y -qq      
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - eval ! cmake ../ --install-prefix=$HOME

config-no-fftw:
    stage: config-check
    script:
      - apt purge -y -qq libfftw3-dev
      - apt autoremove -y -qq      
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - eval ! cmake ../ --install-prefix=$HOME

config-no-lapack:
    stage: config-check
    script:
      - apt purge -y -qq liblapack-dev
      - apt autoremove -y -qq      
      - mpic++ --version
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - eval ! cmake ../ --install-prefix=$HOME

config-no-cuda:
    stage: config-check
    script:
      - mkdir build
      - cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror -Wpedantic -pedantic-errors  -Wextra -Wno-cast-function-type -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter"
      - eval ! cmake ../ --install-prefix=$HOME -DENABLE_CUDA=yes

config-no-nccl:
    stage: config-check
    needs: []
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq nvidia-cuda-dev nvidia-cuda-toolkit libthrust-dev
      - apt purge -y -qq clang clang-14
      - apt autoremove -y -qq
      - nvcc -V
      - mkdir build
      - cd build
      -  eval ! cmake ../ --install-prefix=$HOME -DENABLE_CUDA=yes -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_ARCHITECTURES="70" -DMPI_EXECUTABLE_SUFFIX=.mpich -DENABLE_NCCL=YES

#########################################################################################################################
# GCC OMPI COVERAGE
#########################################################################################################################

gcc-ompi-coverage:
    stage: build
    script:
      - mkdir build && cd build
      - export CXXFLAGS="-O3 -Wall -Wextra --coverage"      
      - cmake ../ -DCMAKE_BUILD_TYPE=Release --install-prefix=$HOME -DMPI_EXECUTABLE_SUFFIX=.openmpi
      - time make
      - time make install
      - cd ../
      - time tar -Ipixz -cvf gcc-ompi-coverage.tar.xz build/
      - ls -lh gcc-ompi-coverage.tar.xz
    artifacts:
      paths:
      - gcc-ompi-coverage.tar.xz

gcc-ompi-coverage-1proc:
    stage: test
    needs: ["gcc-ompi-coverage"]
    script:
      - time tar -Ipixz -xvf gcc-ompi-coverage.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - cd src; ctest --output-on-failure --timeout 2000; cd ..
      - cd tests; ctest --output-on-failure --timeout 2000; cd ..
      - cd speed_tests; ctest --output-on-failure --timeout 2000 || echo "Ignoring failed speed test"; cd ..
      - bash <(curl -s https://codecov.io/bash) || echo 'Codecov failed to upload'

gcc-ompi-coverage-4proc:
    stage: test
    needs: ["gcc-ompi-coverage"]
    script:
      - time tar -Ipixz -xvf gcc-ompi-coverage.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - cd src; INQ_EXEC_ENV="mpirun.openmpi -np 4" ctest --output-on-failure --timeout 2000; cd ..
      - cd tests; INQ_EXEC_ENV="mpirun.openmpi -np 4" ctest --output-on-failure --timeout 2000; cd ..
      - cd speed_tests; INQ_EXEC_ENV="mpirun.openmpi -np 4" ctest --output-on-failure --timeout 2000 || echo "Ignoring failed speed test"; cd ..
      - bash <(curl -s https://codecov.io/bash) || echo 'Codecov failed to upload'      

#############################################################################################
# GCC-MPICH
#############################################################################################

gcc-mpich:
    stage: build
    script:
      - c++ --version
      - mpichversion
      - mkdir build && cd build
      - CXXFLAGS="-ffast-math" cmake ../ --install-prefix=$HOME -DCMAKE_BUILD_TYPE=Release -DMPI_EXECUTABLE_SUFFIX=.mpich
      - time make
      - time make install
      - cd ../
      - time tar -Ipixz -cvf gcc-mpich-build.tar.xz build/
    artifacts:
      paths:
      - gcc-mpich-build.tar.xz

# gcc-mpich-valgrind-utests-1proc:
#     stage: test
#     needs: ["gcc-mpich"]
#     script:
#       - time apt update -qq
#       - time apt install --no-install-recommends -y -qq pixz git ca-certificates ssh g++ gfortran make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libboost-filesystem-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev
#       - export SUPP_FILE=`pwd`/.valgrind_suppressions
#       - time tar -Ipixz -xvf gcc-mpich-build.tar.xz
#       - cd build
#       - cmake --build . --target install/fast
#       - export VALGRIND="valgrind --leak-check=full --track-origins=yes --show-leak-kinds=all --error-exitcode=1 --gen-suppressions=all --suppressions=$SUPP_FILE"
#       - ulimit -n ; ulimit -n 1024  # neededed by valgrind in docker running in Fedora
#       - cd src; INQ_EXEC_ENV="$VALGRIND" ctest --output-on-failure --timeout 7200; cd ..

# gcc-mpich-valgrind-itests-1proc:
#     stage: test
#     needs: ["gcc-mpich"]
#     script:
#       - time apt update -qq
#       - time apt install --no-install-recommends -y -qq pixz git ca-certificates ssh g++ gfortran make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libboost-filesystem-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev
#       - export SUPP_FILE=`pwd`/.valgrind_suppressions      
#       - time tar -Ipixz -xvf gcc-mpich-build.tar.xz
#       - cd build
#       - cmake --build . --target install/fast
#       - ulimit -n ; ulimit -n 1024  # neededed by valgrind in docker running in Fedora
#       - export VALGRIND="valgrind --leak-check=full --track-origins=yes --show-leak-kinds=all --error-exitcode=1 --gen-suppressions=all --suppressions=$SUPP_FILE"
#       - time $VALGRIND tests/h2o_ground_state
#       - time $VALGRIND tests/h2o_real_time
      

gcc-mpich-1proc:
    stage: test
    needs: ["gcc-mpich"]
    script:
      - time tar -Ipixz -xvf gcc-mpich-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - ctest --output-on-failure --timeout 360

gcc-mpich-2proc:
    stage: test
    needs: ["gcc-mpich"]
    script:
      - time tar -Ipixz -xvf gcc-mpich-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 2" ctest --output-on-failure --timeout 3600

gcc-mpich-3proc:
    stage: test
    needs: ["gcc-mpich"]
    script:
      - time tar -Ipixz -xvf gcc-mpich-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 3" ctest --output-on-failure --timeout 3600

gcc-mpich-4proc:
    stage: test
    needs: ["gcc-mpich"]
    script:
      - time tar -Ipixz -xvf gcc-mpich-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 4" ctest --output-on-failure --timeout 3600

gcc-mpich-5proc:
    stage: test
    needs: ["gcc-mpich"]
    script:
      - time tar -Ipixz -xvf gcc-mpich-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - cd tests; INQ_EXEC_ENV="mpirun.mpich -np 5" ctest --output-on-failure --timeout 3600; cd ..

#########################################################################################################################
# GCC-OMPI-DEBUG
#########################################################################################################################

gcc-ompi-debug:
    stage: build
    script:
      - mpic++.openmpi --version
      - mkdir build && cd build
      - cmake ../ --install-prefix=$HOME -DCMAKE_BUILD_TYPE=Debug -DMPI_EXECUTABLE_SUFFIX=.openmpi || cat config.log
      - time make
      - time make install
      - cd ../
      - time tar -Ipixz -cvf gcc-ompi-debug-build.tar.xz build/
    artifacts:
      paths:
      - gcc-ompi-debug-build.tar.xz

gcc-ompi-debug-1proc:
    stage: test
    needs: ["gcc-ompi-debug"]    
    script:
      - time tar -Ipixz -xvf gcc-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - ctest --output-on-failure --timeout 360

gcc-ompi-debug-2proc:
    stage: test
    needs: ["gcc-ompi-debug"]
    script:
      - time tar -Ipixz -xvf gcc-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 2" ctest --output-on-failure --timeout 3600
      
gcc-ompi-debug-3proc:
    stage: test
    needs: ["gcc-ompi-debug"]
    script:
      - time tar -Ipixz -xvf gcc-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 3" ctest --output-on-failure --timeout 3600

gcc-ompi-debug-4proc:
    stage: test
    needs: ["gcc-ompi-debug"]
    script:
      - time tar -Ipixz -xvf gcc-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 4" ctest --output-on-failure --timeout 3600

gcc-ompi-debug-5proc:
    stage: test
    needs: ["gcc-ompi-debug"]
    script:
      - time tar -Ipixz -xvf gcc-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - cd tests; INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 5" ctest --output-on-failure --timeout 3600; cd ..


#########################################################################################################################
# GCC-OMPI-FAST
#########################################################################################################################
      
gcc-ompi-fast:
    stage: build
    script:
      - mpic++.openmpi --version
      - mkdir build && cd build
      - export CXXFLAGS="-Ofast -ffast-math -DNDEBUG -pipe -Wall -Werror -Wpedantic -pedantic-errors -Wextra -Wno-narrowing -Wno-cast-function-type -Wno-unknown-pragmas -Wno-error=cast-function-type -Wno-unused-parameter -Wno-error=unused-parameter -Wno-error=deprecated-declarations"
      - cmake ../ -DCMAKE_BUILD_TYPE=Release --install-prefix=$HOME -DMPI_EXECUTABLE_SUFFIX=.openmpi || cat config.log
      - time make
      - time make install
      - cd ../ 
      - time tar -Ipixz -cvf gcc-ompi-fast-build.tar.xz build/
    artifacts:
      paths:
      - gcc-ompi-fast-build.tar.xz

gcc-ompi-fast-1proc:
    stage: test
    needs: ["gcc-ompi-fast"]
    script:
      - time tar -Ipixz -xvf gcc-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast      
      - ctest --output-on-failure --timeout 360

gcc-ompi-fast-2proc:
    stage: test
    needs: ["gcc-ompi-fast"]    
    script:
      - time tar -Ipixz -xvf gcc-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 2" ctest --output-on-failure --timeout 3600

gcc-ompi-fast-3proc:
    stage: test
    needs: ["gcc-ompi-fast"]    
    script:
      - time tar -Ipixz -xvf gcc-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 3" ctest --output-on-failure --timeout 3600

gcc-ompi-fast-4proc:
    stage: test
    needs: ["gcc-ompi-fast"]    
    script:
      - time tar -Ipixz -xvf gcc-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 4" ctest --output-on-failure --timeout 3600
      
gcc-ompi-fast-5proc:
    stage: test
    needs: ["gcc-ompi-fast"]    
    script:
      - time tar -Ipixz -xvf gcc-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - cd tests; INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 5" ctest --output-on-failure --timeout 3600; cd ..

#########################################################################################################################
# CLANG-OMPI-DEBUG
#########################################################################################################################

clang-ompi-debug:
    stage: build
    script:
      - clang++ --version
      - mkdir build
      - cd build
      - CXXFLAGS="-O3 -pipe -Wall -Werror"
      - CXX=clang++ CC=clang cmake ../ -DCMAKE_BUILD_TYPE=Debug --install-prefix=$HOME -DMPI_EXECUTABLE_SUFFIX=.openmpi
      - ls -l
      - time make
      - time make install
      - cd ../
      - time tar -Ipixz -cvf clang-ompi-debug-build.tar.xz build/
    artifacts:
      paths:
      - clang-ompi-debug-build.tar.xz

clang-ompi-debug-1proc:
    stage: test
    needs: ["clang-ompi-debug"]    
    script:
      - time tar -Ipixz -xvf clang-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - ctest --output-on-failure --timeout 360

clang-ompi-debug-2proc:
    stage: test
    needs: ["clang-ompi-debug"]
    script:
      - time tar -Ipixz -xvf clang-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 2" ctest --output-on-failure --timeout 3600
      
clang-ompi-debug-3proc:
    stage: test
    needs: ["clang-ompi-debug"]
    script:
      - time tar -Ipixz -xvf clang-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 3" ctest --output-on-failure --timeout 3600

clang-ompi-debug-4proc:
    stage: test
    needs: ["clang-ompi-debug"]
    script:
      - time tar -Ipixz -xvf clang-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 4" ctest --output-on-failure --timeout 3600

clang-ompi-debug-5proc:
    stage: test
    needs: ["clang-ompi-debug"]
    script:
      - time tar -Ipixz -xvf clang-ompi-debug-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - cd tests; INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 5" ctest --output-on-failure --timeout 3600; cd ..

#########################################################################################################################
# CLANG-OMPI-FAST
#########################################################################################################################

clang-ompi-fast:
    stage: build
    script:
      - clang++ --version
      - mkdir build && cd build
      - CXX=clang++ cmake ../ --install-prefix=$HOME -DCMAKE_BUILD_TYPE=Release -DMPI_EXECUTABLE_SUFFIX=.openmpi
      - time make -j4
      - time make -j4 install
      - cd ../
      - time tar -Ipixz -cvf clang-ompi-fast-build.tar.xz build/
    artifacts:
      paths:
      - clang-ompi-fast-build.tar.xz

clang-ompi-fast-1proc:
    stage: test
    needs: ["clang-ompi-fast"]
    script:
      - export INQ_COMM="point"      
      - time tar -Ipixz -xvf clang-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast      
      - ctest --output-on-failure --timeout 360

clang-ompi-fast-2proc:
    stage: test
    needs: ["clang-ompi-fast"]    
    script:
      - export INQ_COMM="point"      
      - time tar -Ipixz -xvf clang-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 2" ctest --output-on-failure --timeout 3600

clang-ompi-fast-3proc:
    stage: test
    needs: ["clang-ompi-fast"]    
    script:
      - export INQ_COMM="point"      
      - time tar -Ipixz -xvf clang-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 3" ctest --output-on-failure --timeout 3600

clang-ompi-fast-4proc:
    stage: test
    needs: ["clang-ompi-fast"]    
    script:
      - export INQ_COMM="point"      
      - time tar -Ipixz -xvf clang-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 4" ctest --output-on-failure --timeout 3600
      
clang-ompi-fast-5proc:
    stage: test
    needs: ["clang-ompi-fast"]    
    script:
      - export INQ_COMM="point"      
      - time tar -Ipixz -xvf clang-ompi-fast-build.tar.xz
      - cd build
      - cmake --build . --target install/fast
      - cd tests; INQ_EXEC_ENV="mpirun.openmpi --allow-run-as-root -np 5" ctest --output-on-failure --timeout 3600; cd ..

#########################################################################################################################
# NVIDIA MPICH FAST
#########################################################################################################################

cuda-mpich-fast-build:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: build
    needs: []
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - apt purge -y -qq clang clang-14
      - apt autoremove -y -qq
      - nvcc -V
      - mkdir build
      - cd build
      - cmake ../ --install-prefix=$HOME -DCMAKE_BUILD_TYPE=Release -DENABLE_CUDA=yes -DCMAKE_CUDA_ARCHITECTURES="70" -DMPI_EXECUTABLE_SUFFIX=.mpich
      - make -j4
      - find -name \*.o | xargs rm -v
      - cd ../
      - time tar -Ipixz -cvf cuda-mpich-fast-build.tar.xz build/
      - du -sh build/*
      - ls -lh cuda-mpich-fast-build.tar.xz
    artifacts:
      paths:
      - cuda-mpich-fast-build.tar.xz

cuda-mpich-fast-1proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-fast-build]    
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-fast-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1
      - cd build      
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 1 $GPUBIND" ctest --output-on-failure --timeout 3600 -j2

cuda-mpich-fast-2proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-fast-build]    
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-fast-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1      
      - cd build      
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 2 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1

cuda-mpich-fast-4proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-fast-build]    
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-fast-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1      
      - cd build      
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 4 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1

cuda-mpich-fast-5proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-fast-build]    
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-fast-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1      
      - cd build      
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 5 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1

#########################################################################################################################
# NVIDIA MPICH DEBUG
#########################################################################################################################

cuda-mpich-debug-build:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: build
    needs: []
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - apt purge -y -qq clang clang-14
      - apt autoremove -y -qq
      - nvcc -V
      - mkdir build
      - cd build
      - cmake ../ --install-prefix=$HOME -DCMAKE_BUILD_TYPE=Debug -DENABLE_CUDA=yes -DCMAKE_CUDA_ARCHITECTURES="70" -DMPI_EXECUTABLE_SUFFIX=.mpich
      - make -j4
      - find -name \*.o | xargs rm -v
      - cd ../
      - time tar -Ipixz -cvf cuda-mpich-debug-build.tar.xz build/
      - du -sh build/*
      - ls -lh cuda-mpich-debug-build.tar.xz
    artifacts:
      paths:
      - cuda-mpich-debug-build.tar.xz

cuda-mpich-debug-1proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-debug-build]
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-debug-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1      
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 1 $GPUBIND" ctest --output-on-failure --timeout 3600 -j2
      - INQ_EXEC_ENV="mpirun.mpich -np 2 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1
      - INQ_EXEC_ENV="mpirun.mpich -np 3 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1
      - INQ_EXEC_ENV="mpirun.mpich -np 4 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1

cuda-mpich-debug-1proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-debug-build]
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-debug-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1      
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 1 $GPUBIND" ctest --output-on-failure --timeout 3600 -j2

cuda-mpich-debug-2proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-debug-build]
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-debug-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1      
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 2 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1

cuda-mpich-debug-3proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-debug-build]
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-debug-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 3 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1

cuda-mpich-debug-4proc:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    stage: test
    needs: [cuda-mpich-debug-build]
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev ase
      - time tar -Ipixz -xvf cuda-mpich-debug-build.tar.xz
      - export GPUBIND=`pwd`/scripts/gpubind
      - export CUDA_VISIBLE_DEVICES=0,1      
      - cd build
      - cmake --build . --target install/fast
      - INQ_EXEC_ENV="mpirun.mpich -np 4 $GPUBIND" ctest --output-on-failure --timeout 3600 -j1

#########################################################################################################################
# NVIDIA MPICH NCCL (disabled for now, it gives a deadlock)
#########################################################################################################################

#nccl-mpich:
#    stage: test
#    needs: []
#    tags:
#      - cuda_gpu
#    script:
#      - export GPUBIND=`pwd`/scripts/gpubind
#      - export CUDA_VISIBLE_DEVICES=0,1      
#      - export INQ_COMM="nccl"
#      - mkdir build
#      - cd build
#      - export PATH=/usr/local/cuda/bin:$PATH
#      - nvcc -V
#      - cmake ../ -DCMAKE_BUILD_TYPE=Debug --install-prefix=`pwd`/../install -DENABLE_CUDA=yes -DCMAKE_CUDA_ARCHITECTURES=70 -DMPI_EXECUTABLE_SUFFIX=.mpich -DENABLE_NCCL=YES -DNCCL_ROOT=/usr/local/nccl
#      - time make -j16
#      - time make -j16 install
#      - INQ_EXEC_ENV="mpirun.mpich -np 1" ctest --output-on-failure --timeout 600 -j4
#      - cd src ; INQ_EXEC_ENV="mpirun.mpich -np 2 $GPUBIND" ctest --output-on-failure --timeout 600 -j2; cd ..
#      - cd tests ; INQ_EXEC_ENV="mpirun.mpich -np 2 $GPUBIND" ctest --output-on-failure --timeout 1800 -j2; cd ..

#######################################################################################################################

gcc-mpich-template:
    variables:
      GIT_STRATEGY: none
    stage: template
    script:
      - mkdir inq_template_dir
      - cd inq_template_dir
      - git clone https://gitlab.com/npneq/inq_template.git
      - cd inq_template
      - echo $CI_COMMIT_SHA
      - perl -pi -e s/master/${CI_COMMIT_SHA}/g CMakeLists.txt
      - cat CMakeLists.txt
      - mkdir build && cd build
      - time cmake ../ --install-prefix=`pwd`/../install/ -DCMAKE_BUILD_TYPE=Debug -DMPI_EXECUTABLE_SUFFIX=.mpich
      - time make -j2
      - time make -j2 install
      - cd runs
      - mpirun.mpich -np 2 ./nitrogen

#######################################################################################################################

nvcc-mpich-template:
    image: nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
    variables:
      GIT_STRATEGY: none
    stage: template
    needs: []
    tags:
      - cuda-docker
    script:
      - apt update -qq
      - apt install --no-install-recommends -y -qq pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev   
      - apt purge -y -qq clang clang-14
      - apt autoremove -y -qq
      - nvidia-smi
      - mkdir inq_template_dir
      - cd inq_template_dir
      - git clone https://gitlab.com/npneq/inq_template.git
      - cd inq_template
      - echo $CI_COMMIT_SHA
      - perl -pi -e s/master/${CI_COMMIT_SHA}/g CMakeLists.txt
      - cat CMakeLists.txt
      - mkdir build && cd build
      - time cmake ../ --install-prefix=`pwd`/../install/ -DCMAKE_BUILD_TYPE=Debug -DENABLE_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES="70" -DMPI_EXECUTABLE_SUFFIX=.mpich
      - time make -j2
      - time make -j2 install
      - export GPUBIND=`pwd`/_deps/inq-src/scripts/gpubind
      - cd runs
      - mpirun.mpich -np 2 $GPUBIND ./nitrogen

#######################################################################################################################

clang-ompi-template:
    variables:
      GIT_STRATEGY: none
    stage: template
    script:
      - time apt update -qq
      - time apt install --no-install-recommends -y -qq wget
      - mkdir inq_template_dir
      - cd inq_template_dir
      - wget https://gitlab.com/npneq/inq_template/-/archive/main/inq_template-main.tar.gz
      - tar -xvzf inq_template-main.tar.gz
      - cd inq_template-main
      - echo $CI_COMMIT_SHA
      - perl -pi -e s/master/${CI_COMMIT_SHA}/g CMakeLists.txt
      - cat CMakeLists.txt
      - mkdir build && cd build
      - export CXXFLAGS="-O3 -pipe -Wall -Werror"
      - export CXX=clang++
      - export CC=clang
      - time cmake ../ --install-prefix=`pwd`/../install/ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CUDA_ARCHITECTURES=70 -DMPI_EXECUTABLE_SUFFIX=.openmpi
      - time make -j2
      - time make -j2 install
      - cd runs
      - mpirun.openmpi -np 2 ./nitrogen

#######################################################################################################################

hip-mpich-build:
  stage: build
  image: rocm/dev-ubuntu-22.04
  script:
    - apt-get -qq update
    - apt-get install --no-install-recommends -y rocthrust-dev hipblas-dev hipfft-dev rocm-device-libs pixz curl git ca-certificates ssh g++ gfortran clang make cmake pkg-config libblas-dev liblapack-dev libfftw3-dev libopenmpi-dev openmpi-bin libboost-system-dev libboost-serialization-dev libhdf5-dev libhdf5-openmpi-dev valgrind libmpich-dev mpich libhdf5-dev libhdf5-mpich-dev wget python3 python3-dev
    - /opt/rocm/bin/hipconfig --full
    - HIPCC_VERBOSE=1 /opt/rocm/bin/hipcc --version
    - wget https://github.com/Kitware/CMake/releases/download/v3.27.0-rc3/cmake-3.27.0-rc3-linux-x86_64.sh --no-verbose
    - sh ./cmake-3.27.0-rc3-linux-x86_64.sh --skip-license --prefix=/usr
    - cmake --version
    - mkdir build && cd build
    - export PATH=/opt/rocm/bin:/opt/rocm/llvm/bin:${PATH}
    - export CMAKE_PREFIX_PATH=/opt/rocm:${CMAKE_PREFIX_PATH}
    - export ROCM_PATH=/opt/rocm
    - export HIP_PATH=/opt/rocm
    - cmake .. -DCMAKE_HIP_COMPILER=/opt/rocm/llvm/bin/clang++ -DENABLE_HIP=1 -DCMAKE_HIP_ARCHITECTURES=gfx90a
    - make -j2
    
# vim: set sw=4 ts=4 sts=4 tw=80 et nowrap
